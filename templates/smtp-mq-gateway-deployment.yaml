apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    appName: {{ include "common.fullname" . }}
    componentName: smtp-mq-gateway
  labels:
    io.kompose.service: smtp-mq-gateway
  name: smtp-mq-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: smtp-mq-gateway
  strategy: {}
  template:
    metadata:
      annotations:
        appName: {{ include "common.fullname" . }}
        componentName: smtp-mq-gateway
      labels:
        io.kompose.service: smtp-mq-gateway
    spec:
      initContainers:
        - name: init-wait-for-rabbitmq
          image: curlimages/curl:latest
          command:
            - '/bin/sh'
            - '-c'
            - >
              set -ex;
              until curl --fail --connect-timeout 5 -L -u {{ .Values.app.rabbitmq.user }}:{{ .Values.app.rabbitmq.password }} http://rabbitmq:{{ .Values.app.rabbitmq.port2 }}/api/healthchecks/node; do sleep 2; done
      containers:
        - env:
            - name: CLOUD_CONFIG
              value: "false"
            - name: RABBIT_MQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: direct-secrets
                  key: rabbitmq-password
          envFrom:
            - configMapRef:
                name: smtp-mq-gateway-configmap
          image: smtp-mq-gateway:latest
          imagePullPolicy: Never
          name: smtp-mq-gateway
          ports:
            - containerPort: {{ .Values.app.smtpMQgateway.port }}
          resources: {}
          livenessProbe:
            exec:
              command: [ "/smtp-mq-gateway-livenessconfig-map/livenessCheck.sh","localhost", "{{ .Values.app.smtpMQgateway.port  }}" ]
            initialDelaySeconds: {{ .Values.app.smtpMQgateway.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.app.smtpMQgateway.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.app.smtpMQgateway.livenessProbe.timeoutSeconds }}
      restartPolicy: Always
status: {}
